{"version":3,"sources":["containers/TodoList/components/AddTodo.js","containers/TodoList/components/DelTodo.js","containers/TodoList/components/VisibleTodoList.js","containers/TodoList/components/Filter.js","containers/TodoList/TodoList.js","App.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["AddTodo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","content","e","setState","target","value","react_default","a","createElement","className","type","onChange","changeValue","bind","placeholder","onClick","addTodo","Component","DelTodo","delTodo","VisibleTodoList","console","log","todos","this_","map","el","index","key","toggleTodo","id","style","complete","textDecoration","Filter","total","setFilter","i","TodoList","components_AddTodo","components_VisibleTodoList","components_Filter","length","components_DelTodo","getVisibleTodos","filter","t","Error","connect","visibilityFilter","dispatch","App","containers_TodoList_TodoList","Boolean","window","location","hostname","match","reducers","arguments","undefined","action","assign","concat","toConsumableArray","splice","item","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a72cc989.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../css/AddTodo.css'\r\nclass AddTodo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            content:\"\"\r\n        }\r\n    }\r\n    changeValue(e){\r\n        this.setState({\r\n            content:e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='addCont'>\r\n                <input className='input' type=\"text\" value={this.state.content} onChange={this.changeValue.bind(this)} placeholder='添加todo'/>\r\n                <button className='addbtn' onClick={this.props.addTodo.bind(this,this.state.content)}>添加todo</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTodo;\r\n","//删除任务import React, { Component } from 'react';\r\nimport React, { Component } from 'react';\r\n\r\nclass DelTodo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className='delBtn ' onClick={this.props.delTodo.bind(this)}>删除Todo</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DelTodo;\r\n","import React, { Component } from 'react';\r\n\r\nclass VisibleTodoList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        console.log(this.props.todos);\r\n        let this_=this;\r\n        return (\r\n            <ul className='ulStyle'>\r\n                {this.props.todos.map(function (el, index) {\r\n                    return <li className='liStyle' key={index} onClick={this_.props.toggleTodo.bind(this_,el.id)} style={el.complete?{textDecoration:\"line-through\"}:null}>{el.content}</li>\r\n                })}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VisibleTodoList;\r\n","import React,{ Component } from 'react';\r\n\r\nclass Filter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        console.log(\"=条目\",this.props.total)\r\n        return(\r\n            <div>\r\n                <button className='all btn' onClick={this.props.setFilter.bind(this,\"SHOW_ALL\")}>任务列表</button>\r\n                <button className='did btn' onClick={this.props.setFilter.bind(this,\"SHOW_COMPLETED\")}>已完成</button>\r\n                <button className='doing btn' onClick={this.props.setFilter.bind(this,\"SHOW_ACTIVE\")}>正在进行</button>\r\n                <p className='pStyle'>\r\n                    共\r\n                    <span className='spanStyle'>{this.props.total}</span>\r\n                    条\r\n                </p>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Filter;","import React, { Component } from 'react';\r\nimport AddTodo from './components/AddTodo';\r\nimport DelTodo from './components/DelTodo';\r\nimport VisibleTodoList from './components/VisibleTodoList';\r\nimport Filter from './components/Filter'\r\nimport {connect} from \"react-redux\";\r\nimport './css/TodoList.css'\r\nlet i=0;\r\nclass TodoList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='todolist'>\r\n                <AddTodo addTodo={this.props.addTodo} />\r\n                <VisibleTodoList todos={this.props.todos} toggleTodo={this.props.toggleTodo}/>\r\n                <Filter setFilter={this.props.setFilter} total={this.props.todos.length}/>\r\n                <DelTodo  delTodo={this.props.delTodo}/>\r\n            \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//取一部分state给当前的顶层容器用\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todos: getVisibleTodos(state.todos, state.visibilityFilter)\r\n    }\r\n};\r\n//根据todos和visibilityFilter的值来计算状态，映射给当前container的props\r\nconst getVisibleTodos = (todos, filter) => {\r\n    switch (filter) {\r\n        case 'SHOW_ALL':\r\n            return todos;\r\n        case 'SHOW_COMPLETED':\r\n            return todos.filter(t => t.complete);\r\n        case 'SHOW_ACTIVE':\r\n            return todos.filter(t => !t.complete);\r\n        default:\r\n            throw new Error('Unknown filter: ' + filter)\r\n    }\r\n};\r\n\r\n//将事件绑定到顶层容器props，调用props.事件时可以直接派发action到store，进行状态修改\r\nconst mapDispatchToProps = (\r\n    dispatch\r\n) => {\r\n    return {\r\n        setFilter: (filter) => {\r\n            dispatch({\r\n                type: 'SET_VISIBILITY_FILTER',\r\n                filter: filter\r\n            });\r\n        },\r\n        addTodo: (content) => {\r\n            dispatch({\r\n                type: 'ADD_TODO',\r\n                content: content,\r\n                id:i++\r\n            });\r\n        },\r\n        delTodo: (id) => {\r\n            dispatch({\r\n                type: 'DEL_TODO',\r\n                id:id\r\n            });\r\n        },\r\n        toggleTodo: (id)=>{\r\n            dispatch({\r\n                type: 'TOGGLE_TODO',\r\n                id: id\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./containers/TodoList/TodoList\";\r\n\r\nclass App extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n          <TodoList/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nconst reducers = (state={\r\n    todos:[],\r\n    visibilityFilter:\"SHOW_ALL\"\r\n}, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_TODO\"://添加\r\n            return Object.assign({}, state, {\r\n                todos: [...state.todos,{content:action.content,complete:false,id:action.id}]\r\n            });\r\n        case \"DEL_TODO\"://删除全部\r\n            return Object.assign({}, state, {\r\n                todos: [...state.todos].splice()\r\n            });\r\n        case \"TOGGLE_TODO\"://切换状态\r\n            return Object.assign({}, state, {\r\n                todos: [...state.todos].map(function (item, index) {\r\n                    if (item.id === action.id) {\r\n                        console.log('------------------')\r\n                        item.complete=!item.complete;\r\n                    }\r\n                    return item\r\n                })\r\n            });\r\n        case \"SET_VISIBILITY_FILTER\"://显示\r\n            return Object.assign({}, state, {\r\n                visibilityFilter: action.filter\r\n            });\r\n        default: return state;\r\n    }\r\n};\r\nexport default reducers;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducers from \"./redux/reducers\";\r\nlet store = createStore(reducers);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}